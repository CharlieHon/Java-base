package chapter04;

public class BitOperator {
    public static void main(String[] args) {
        /**
         * 1. Java没有无符号数，即Java中的数都是有符号的
         * 2. 在计算机运算的时候，都是以补码的方式来运算的
         * 3. 当查看运算结果时，要看它的原码
         */
        // Java有7个位运算符：&, |, !, ^, >>, <<, >>>
        // 1. 先得到2的补码：0000 0000 0000 0000 0000 0000 0000 0010
        // 2.       3       0000 0000 0000 0000 0000 0000 0000 0011
        // 3. 按位与
        // 4. 运算后的补码转原码，因为整数三码合一
        System.out.println(2&3);    // 2
        System.out.println(2|3);    // 3
        System.out.println(2^3);    // 1

        // 1. -2的补码 2^32 -2 = 1111 1111 1111 1111 1111 1111 1111 1110
        // 2. 按位取反  0000 0000 0000 0000 0000 0000 0000 0001
        // 3. 补码符号位为0，整数，三码合一，结果为1
        System.out.println(~-2);    // 1

        // 1. 2的原码/补码取反：1111 1111 1111 1111 1111 1111 1111 1101
        // 2. 对应原码：1000 0000 0000 0000 0000 0000 0000 0011
        System.out.println(~2); // -3

        /**
         * 1. 算术右移>>：低位溢出，符号位不变，并用符号位补溢出的高位
         * 2. 算术左移<<：符号位不变，低位补0
         * 3. >>>逻辑右移也叫无符号右移，运算规则：低位溢出，高位补零
         * 4. 特别说明：没有 <<< 符号
         */
        int a = 1 >> 2; // 0
        int c = 1 << 2; // 4
        System.out.println("a = " + a + ", c = " + c);  // a = 0, c = 4
        int b = -1 >> 2;    // 11111111 11111111 11111111 11111111  -> -1
        int d = -1 << 2;    // 11111111 11111111 11111111 11111100  -> -4
        int e = 3 >>> 2;    // 算术右移 0011 -> 0
        System.out.println("b = " + b + 
            ", d = " + d + ", e = " + e);   // b = -1, d = -4, e = 0
    }
}
